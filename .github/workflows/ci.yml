
name: CI & Deploy

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: 1. Code checkout
        uses: actions/checkout@v4

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: 3. Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-22-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-22-

      - name: 4. Install dependencies
        run: npm ci --prefer-offline

      - name: 5. Execute Linter
        run: npm run lint
        continue-on-error: true

      - name: 6. Execute Tests
        run: npm test

  deploy_staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    steps:
      - name: 1. Code checkout
        uses: actions/checkout@v4

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: 3. Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 4. Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 5. Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 6. Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy_production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 1. Code checkout
        uses: actions/checkout@v4

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: 3. Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 4. Deploy to Production
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} pull --yes && vercel build && vercel deploy --prod
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}